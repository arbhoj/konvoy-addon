---
apiVersion: kubeaddons.mesosphere.io/v1beta1
kind: Addon
metadata:
  name: elastic-external
  namespace: platformservices
  labels:
    kubeaddons.mesosphere.io/name: elastic
    # TODO: we're temporarily supporting dependency on an existing default storage class
    # on the cluster, this hack will trigger re-queue on Addons until one exists
    kubeaddons.mesosphere.io/hack-requires-defaultstorageclass: "true"
  annotations:
    catalog.kubeaddons.mesosphere.io/addon-revision: "1.0.1-1"
    appversion.kubeaddons.mesosphere.io/elastic: "1.0.1"
    values.chart.helm.kubeaddons.mesosphere.io/elastic: "https://raw.githubusercontent.com/helm/charts/master/stable/elasticsearch/values.yaml"
spec:
  kubernetes:
    minSupportedVersion: v1.19.0
  cloudProvider:
    - name: aws
      enabled: true
    - name: azure
      enabled: true
    - name: docker
      enabled: false
    - name: none
      enabled: true
  chartReference:
    chart: elasticsearch 
    repo: https://mesosphere.github.io/charts/stable
    version: 2.0.0
    values: |
      client:
        heapSize: 1024m
        resources:
          limits:
            cpu: 500m
            memory: 2048Mi
          requests:
            cpu: 100m
            memory: 1536Mi
      data:
        heapSize: 3072m
        hooks:
          drain:
            enabled: false
          postStart: |-
            #!/bin/bash
            set -o errexit
            set -o nounset
            set -o pipefail

            CLIENT_URL=http://{{ template "elasticsearch.client.fullname" . }}.platformservices.svc.cluster.local.:9200
            # Wait until client nodes accept requests.
            # This prevents data pods from getting into a long CrashLoopBackoff.
            echo "Waiting for client node service ..."
            while [[ "$(curl -s -o /dev/null -w '%{http_code}' -L ${CLIENT_URL}/_cluster/health)" != "200" ]]; do sleep 1; done

            # Creating the index template: 'kubernetes_audit'
            # Reduces the number of fields produced due to the indexing of the audit logs
            # if template doesnt return 200, try to create it
            if [[ "$(curl -s -o /dev/null -w '%{http_code}' -L ${CLIENT_URL}/_template/kubernetes_audit)" != "200" ]]; then
              echo "Creating the index template: 'kubernetes_audit'"
              RES_CREATE_TEMPLATE=$(curl -XPUT -s -o /dev/null -w '%{http_code}' ${CLIENT_URL}/_template/kubernetes_audit\
                -H "Content-Type: application/json; charset=utf-8" \
